{"ast":null,"code":"var _jsxFileName = \"/Users/stephenkeating/Development/code/stock-tracker-ttp/frontend/src/Components/Stock.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport userActions from '../redux/actions';\n\nconst Stock = props => {\n  // initializing dispatch\n  // const dispatch = useDispatch();\n  // Setting up local state using the useState hook\n  const [stock, setStock] = useState({\n    ticker: props.ticker,\n    quantity: props.quantity,\n    latestPrice: 0,\n    open: 0\n  }); // useEffect acts like componentDidMount for Hooks\n\n  useEffect(() => {\n    userActions.getQuote(ticker).then(data => {\n      setStock({ ...stock,\n        latestPrice: data.latestPrice,\n        open: data.open\n      });\n    });\n    userActions.updatePortfolioValue(latestPrice * props.quantity);\n  }, [props.quantity]); // Destructuring keys from local state to use in the form\n\n  const {\n    ticker,\n    latestPrice,\n    open\n  } = stock; // Getting Stock Quantity from State to force component to reload\n\n  const stateQuantity = useSelector(state => state.portfolio[ticker].quantity); // Display:\n  // red if current price < open price, \n  // grey if current price = open price, \n  // green if the current price > open price.\n\n  const stockColor = () => {\n    if (open > latestPrice) {\n      return \"red\";\n    } else if (open < latestPrice) {\n      return \"green\";\n    } else {\n      return \"grey\";\n    }\n  };\n\n  const pluralize = quantity => {\n    return quantity === 1 ? \"Share\" : \"Shares\";\n  };\n\n  return React.createElement(\"div\", {\n    className: \"stock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: stockColor(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, ticker, \" \\u2013\\u2013 \", stateQuantity, \" \", pluralize(stateQuantity), \" \\u2013\\u2013 $\", +parseFloat(latestPrice * stateQuantity).toFixed(2)));\n};\n\nexport default Stock; //   componentDidMount = () => {\n//     fetch(`https://cloud.iexapis.com/stable/stock/${this.props.ticker}/quote?token=${IEX_SANDBOX_SECRET_TOKEN}`)\n//       .then((res) => { return res.json() })\n//       .then((data) => { return this.setState(\n//           {current_price: data.latestPrice,\n//           open_price: data.open}\n//       ); }\n//       )\n//       .then(() => this.props.portfolioValue(this.state.current_price * this.state.qty))\n//       .catch((err) => { console.log(err) })\n//   }\n//   componentDidUpdate = (previousProps, previousState) => {\n//     if (this.props.qty !== previousProps.qty) {\n//       this.props.portfolioValue(this.state.current_price * (this.props.qty - previousProps.qty))\n//     }\n//   }\n//   stockColor = () => {\n//     if (this.state.open_price > this.state.current_price) {\n//       return \"red\"\n//     } else if (this.state.open_price < this.state.current_price) {\n//       return \"green\"\n//     } else {\n//       return \"grey\"\n//     }\n//   }\n//   pluralize = (qty) => {\n//     return qty === 1 ? \"Stock\" : \"Stocks\"\n//   }\n//   render(){\n//     return (\n//       <div className=\"stock\">\n//         <div className={this.stockColor()}>\n//           {this.props.ticker.toUpperCase()} - {this.props.qty} {this.pluralize(this.props.qty)} - ${(this.props.qty * this.state.current_price).toFixed(2)}\n//         </div>\n//       </div>\n//     )\n//   }\n// }\n// export default Stock;","map":{"version":3,"sources":["/Users/stephenkeating/Development/code/stock-tracker-ttp/frontend/src/Components/Stock.js"],"names":["React","useState","useEffect","useSelector","userActions","Stock","props","stock","setStock","ticker","quantity","latestPrice","open","getQuote","then","data","updatePortfolioValue","stateQuantity","state","portfolio","stockColor","pluralize","parseFloat","toFixed"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,WAAP,MAAwB,kBAAxB;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AACrB;AACA;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC;AACjCQ,IAAAA,MAAM,EAAEH,KAAK,CAACG,MADmB;AAEjCC,IAAAA,QAAQ,EAAEJ,KAAK,CAACI,QAFiB;AAGjCC,IAAAA,WAAW,EAAE,CAHoB;AAIjCC,IAAAA,IAAI,EAAE;AAJ2B,GAAD,CAAlC,CAJqB,CAWrB;;AACAV,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,WAAW,CAACS,QAAZ,CAAqBJ,MAArB,EACGK,IADH,CACQC,IAAI,IAAI;AACZP,MAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWI,QAAAA,WAAW,EAAEI,IAAI,CAACJ,WAA7B;AAA0CC,QAAAA,IAAI,EAAEG,IAAI,CAACH;AAArD,OAAD,CAAR;AACH,KAHD;AAIAR,IAAAA,WAAW,CAACY,oBAAZ,CAAiCL,WAAW,GAAGL,KAAK,CAACI,QAArD;AACD,GANQ,EAMN,CAACJ,KAAK,CAACI,QAAP,CANM,CAAT,CAZqB,CAoBrB;;AACA,QAAM;AAAED,IAAAA,MAAF;AAAUE,IAAAA,WAAV;AAAuBC,IAAAA;AAAvB,MAAgCL,KAAtC,CArBqB,CAuBrB;;AACA,QAAMU,aAAa,GAAGd,WAAW,CAACe,KAAK,IAAIA,KAAK,CAACC,SAAN,CAAgBV,MAAhB,EAAwBC,QAAlC,CAAjC,CAxBqB,CA0BrB;AACE;AACA;AACA;;AACF,QAAMU,UAAU,GAAG,MAAM;AACvB,QAAIR,IAAI,GAAGD,WAAX,EAAwB;AACtB,aAAO,KAAP;AACD,KAFD,MAEO,IAAIC,IAAI,GAAGD,WAAX,EAAwB;AAC7B,aAAO,OAAP;AACD,KAFM,MAEA;AACL,aAAO,MAAP;AACD;AACF,GARD;;AAUA,QAAMU,SAAS,GAAIX,QAAD,IAAc;AAC9B,WAAOA,QAAQ,KAAK,CAAb,GAAiB,OAAjB,GAA2B,QAAlC;AACD,GAFD;;AAIA,SACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEU,UAAU,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGX,MADH,oBACeQ,aADf,OAC+BI,SAAS,CAACJ,aAAD,CADxC,qBAC8D,CAACK,UAAU,CAACX,WAAW,GAAGM,aAAf,CAAV,CAAwCM,OAAxC,CAAgD,CAAhD,CAD/D,CADF,CADF;AAOD,CAnDD;;AAqDA,eAAelB,KAAf,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport userActions from '../redux/actions';\n\nconst Stock = props => {\n  // initializing dispatch\n  // const dispatch = useDispatch();\n  // Setting up local state using the useState hook\n  const [stock, setStock] = useState({\n    ticker: props.ticker,\n    quantity: props.quantity,\n    latestPrice: 0,\n    open: 0\n  });\n\n  // useEffect acts like componentDidMount for Hooks\n  useEffect(() => {\n    userActions.getQuote(ticker)\n      .then(data => {\n        setStock({...stock, latestPrice: data.latestPrice, open: data.open})\n    })\n    userActions.updatePortfolioValue(latestPrice * props.quantity)\n  }, [props.quantity])\n\n  // Destructuring keys from local state to use in the form\n  const { ticker, latestPrice, open } = stock;\n\n  // Getting Stock Quantity from State to force component to reload\n  const stateQuantity = useSelector(state => state.portfolio[ticker].quantity);\n\n  // Display:\n    // red if current price < open price, \n    // grey if current price = open price, \n    // green if the current price > open price.\n  const stockColor = () => {\n    if (open > latestPrice) {\n      return \"red\"\n    } else if (open < latestPrice) {\n      return \"green\"\n    } else {\n      return \"grey\"\n    }\n  }\n  \n  const pluralize = (quantity) => {\n    return quantity === 1 ? \"Share\" : \"Shares\"\n  }\n\n  return (\n    <div className=\"stock\" >\n      <div className={stockColor()}>\n        {ticker} –– {stateQuantity} {pluralize(stateQuantity)} –– ${+parseFloat(latestPrice * stateQuantity).toFixed(2)}\n      </div>\n    </div>\n  )\n}\n\nexport default Stock;\n\n//   componentDidMount = () => {\n//     fetch(`https://cloud.iexapis.com/stable/stock/${this.props.ticker}/quote?token=${IEX_SANDBOX_SECRET_TOKEN}`)\n//       .then((res) => { return res.json() })\n//       .then((data) => { return this.setState(\n\n//           {current_price: data.latestPrice,\n//           open_price: data.open}\n\n//       ); }\n//       )\n//       .then(() => this.props.portfolioValue(this.state.current_price * this.state.qty))\n//       .catch((err) => { console.log(err) })\n//   }\n\n//   componentDidUpdate = (previousProps, previousState) => {\n//     if (this.props.qty !== previousProps.qty) {\n//       this.props.portfolioValue(this.state.current_price * (this.props.qty - previousProps.qty))\n//     }\n//   }\n\n//   stockColor = () => {\n//     if (this.state.open_price > this.state.current_price) {\n//       return \"red\"\n//     } else if (this.state.open_price < this.state.current_price) {\n//       return \"green\"\n//     } else {\n//       return \"grey\"\n//     }\n//   }\n\n//   pluralize = (qty) => {\n//     return qty === 1 ? \"Stock\" : \"Stocks\"\n//   }\n\n//   render(){\n\n//     return (\n//       <div className=\"stock\">\n//         <div className={this.stockColor()}>\n//           {this.props.ticker.toUpperCase()} - {this.props.qty} {this.pluralize(this.props.qty)} - ${(this.props.qty * this.state.current_price).toFixed(2)}\n//         </div>\n//       </div>\n//     )\n//   }\n\n// }\n\n// export default Stock;"]},"metadata":{},"sourceType":"module"}