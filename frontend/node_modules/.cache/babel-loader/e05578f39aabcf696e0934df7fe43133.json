{"ast":null,"code":"// reducer takes two arguments, state and action\n// inside the function is a switch case. default returns state. \n// return value of the reducer beccomes the new Redux state\nconst initialState = {\n  user: {},\n  transactions: [],\n  portfolio: {},\n  portfolioValue: 0\n};\nexport default ((state = initialState, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case 'SET_USER':\n      return { ...state,\n        user: payload\n      };\n\n    case 'SET_TRANSACTIONS':\n      return { ...state,\n        transactions: payload\n      };\n\n    case 'SET_PORTFOLIO':\n      return { ...state,\n        portfolio: payload\n      };\n\n    case 'CLEAR_USER':\n      return initialState;\n\n    case 'UPDATE_USER_BALANCE':\n      return { ...state,\n        user: { ...state.user,\n          balance: payload\n        }\n      };\n\n    case 'ADD_TRANSACTION':\n      return { ...state,\n        transactions: [...state.transactions, { ...payload\n        }]\n      };\n\n    case 'ADD_SHARE_TO_PORTFOLIO':\n      let updatedStock = {};\n      updatedStock[payload.ticker] = { ...updatedStock[payload.ticker],\n        quantity: payload.quantity\n      };\n      return { ...state,\n        portfolio: { ...state.portfolio,\n          ...updatedStock\n        }\n      };\n\n    case 'SET_SHARE_VALUE':\n      console.log(payload);\n      let updatedShare = {};\n      updatedShare[payload.ticker] = { ...updatedShare[payload.ticker],\n        latestPrice: payload.latestPrice,\n        open: payload.open\n      };\n      return { ...state,\n        portfolio: { ...state.portfolio,\n          ...updatedShare\n        }\n      };\n\n    case 'UPDATE_PORTFOLIO_VALUE':\n      let currentValue = state.portfolioValue;\n      let newValue = currentValue + payload; // console.log(newValue)\n\n      return { ...state,\n        portfolioValue: newValue\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/stephenkeating/Development/code/stock-tracker-ttp/frontend/src/redux/rootReducer.js"],"names":["initialState","user","transactions","portfolio","portfolioValue","state","type","payload","balance","updatedStock","ticker","quantity","console","log","updatedShare","latestPrice","open","currentValue","newValue"],"mappings":"AAAA;AACA;AACA;AAEA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAEnBC,EAAAA,YAAY,EAAE,EAFK;AAGnBC,EAAAA,SAAS,EAAE,EAHQ;AAInBC,EAAAA,cAAc,EAAE;AAJG,CAArB;AAOA,gBAAe,CAACC,KAAK,GAAGL,YAAT,EAAuB;AAAEM,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAvB,KAA6C;AAC1D,UAAQD,IAAR;AACE,SAAK,UAAL;AACE,aAAO,EAAC,GAAGD,KAAJ;AAAWJ,QAAAA,IAAI,EAAEM;AAAjB,OAAP;;AACF,SAAK,kBAAL;AACE,aAAO,EAAC,GAAGF,KAAJ;AAAWH,QAAAA,YAAY,EAAEK;AAAzB,OAAP;;AACF,SAAK,eAAL;AACE,aAAO,EAAC,GAAGF,KAAJ;AAAWF,QAAAA,SAAS,EAAEI;AAAtB,OAAP;;AACF,SAAK,YAAL;AACE,aAAOP,YAAP;;AACF,SAAK,qBAAL;AACE,aAAO,EAAC,GAAGK,KAAJ;AAAWJ,QAAAA,IAAI,EAAE,EAAC,GAAGI,KAAK,CAACJ,IAAV;AAAgBO,UAAAA,OAAO,EAAED;AAAzB;AAAjB,OAAP;;AACF,SAAK,iBAAL;AACE,aAAO,EAAC,GAAGF,KAAJ;AAAWH,QAAAA,YAAY,EAAE,CAAC,GAAGG,KAAK,CAACH,YAAV,EAAwB,EAAC,GAAGK;AAAJ,SAAxB;AAAzB,OAAP;;AACF,SAAK,wBAAL;AACE,UAAIE,YAAY,GAAG,EAAnB;AACAA,MAAAA,YAAY,CAACF,OAAO,CAACG,MAAT,CAAZ,GAA+B,EAAC,GAAGD,YAAY,CAACF,OAAO,CAACG,MAAT,CAAhB;AAAkCC,QAAAA,QAAQ,EAAEJ,OAAO,CAACI;AAApD,OAA/B;AACA,aAAO,EAAC,GAAGN,KAAJ;AACCF,QAAAA,SAAS,EAAE,EACT,GAAGE,KAAK,CAACF,SADA;AAET,aAAGM;AAFM;AADZ,OAAP;;AAMF,SAAK,iBAAL;AACEG,MAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;AACA,UAAIO,YAAY,GAAG,EAAnB;AACAA,MAAAA,YAAY,CAACP,OAAO,CAACG,MAAT,CAAZ,GAA+B,EAAC,GAAGI,YAAY,CAACP,OAAO,CAACG,MAAT,CAAhB;AAAkCK,QAAAA,WAAW,EAAER,OAAO,CAACQ,WAAvD;AAAoEC,QAAAA,IAAI,EAAET,OAAO,CAACS;AAAlF,OAA/B;AACA,aAAO,EAAC,GAAGX,KAAJ;AACCF,QAAAA,SAAS,EAAE,EACT,GAAGE,KAAK,CAACF,SADA;AAET,aAAGW;AAFM;AADZ,OAAP;;AAMF,SAAK,wBAAL;AACE,UAAIG,YAAY,GAAGZ,KAAK,CAACD,cAAzB;AACA,UAAIc,QAAQ,GAAGD,YAAY,GAAGV,OAA9B,CAFF,CAGE;;AACA,aAAO,EAAC,GAAGF,KAAJ;AAAWD,QAAAA,cAAc,EAAEc;AAA3B,OAAP;;AACF;AACE,aAAOb,KAAP;AAtCJ;AAwCD,CAzCD","sourcesContent":["// reducer takes two arguments, state and action\n// inside the function is a switch case. default returns state. \n// return value of the reducer beccomes the new Redux state\n\nconst initialState = {\n  user: {},\n  transactions: [],\n  portfolio: {},\n  portfolioValue: 0\n}\n\nexport default (state = initialState, { type, payload }) => {\n  switch (type) {\n    case 'SET_USER':\n      return {...state, user: payload};\n    case 'SET_TRANSACTIONS':\n      return {...state, transactions: payload};\n    case 'SET_PORTFOLIO':\n      return {...state, portfolio: payload};\n    case 'CLEAR_USER':\n      return initialState;\n    case 'UPDATE_USER_BALANCE':\n      return {...state, user: {...state.user, balance: payload}};\n    case 'ADD_TRANSACTION':\n      return {...state, transactions: [...state.transactions, {...payload}]};\n    case 'ADD_SHARE_TO_PORTFOLIO':\n      let updatedStock = {}\n      updatedStock[payload.ticker] = {...updatedStock[payload.ticker], quantity: payload.quantity}\n      return {...state,\n              portfolio: {\n                ...state.portfolio,\n                ...updatedStock\n              }\n      }\n    case 'SET_SHARE_VALUE':\n      console.log(payload)\n      let updatedShare = {}\n      updatedShare[payload.ticker] = {...updatedShare[payload.ticker], latestPrice: payload.latestPrice, open: payload.open}\n      return {...state,\n              portfolio: {\n                ...state.portfolio,\n                ...updatedShare\n              }\n      }\n    case 'UPDATE_PORTFOLIO_VALUE':\n      let currentValue = state.portfolioValue\n      let newValue = currentValue + payload\n      // console.log(newValue)\n      return {...state, portfolioValue: newValue};\n    default:\n      return state;\n  }\n};"]},"metadata":{},"sourceType":"module"}