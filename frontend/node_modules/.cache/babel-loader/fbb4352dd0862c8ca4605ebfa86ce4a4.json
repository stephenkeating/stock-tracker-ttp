{"ast":null,"code":"// API CONSTANTS\nconst BASE_URL = 'http://localhost:3000';\nconst USERS_URL = BASE_URL + '/users';\nconst PERSIST_URL = BASE_URL + '/auth';\nconst LOGIN_URL = BASE_URL + '/login';\n\nconst SPECIFIC_USER_URL = id => USERS_URL + '/' + id; // Redux Actions\n\n\nconst setUserAction = userObj => {\n  return {\n    type: 'SET_USER',\n    payload: userObj\n  };\n};\n\nconst clearUserAction = () => ({\n  type: 'CLEAR_USER'\n}); // Fetch\n\n\nconst newUserToDB = userObj => dispatch => {\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userObj)\n  };\n  fetch(USERS_URL, config).then(r => r.json()).then(data => {\n    dispatch(setUserAction(data.user));\n    localStorage.setItem('token', data.token);\n  });\n};\n\nconst deleteUserFromDB = userId => dispatch => {\n  const config = {\n    method: 'DELETE'\n  };\n  fetch(SPECIFIC_USER_URL(userId), config).then(r => {\n    dispatch(clearUserAction());\n    localStorage.clear();\n  });\n};\n\nconst loginUserToDB = userCredentials => dispatch => {\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userCredentials)\n  };\n  fetch(LOGIN_URL, config).then(r => r.json()).then(data => {\n    dispatch(setUserAction(data.user));\n    localStorage.setItem('token', data.token);\n  });\n};\n\nconst persistUser = () => dispatch => {\n  const config = {\n    method: 'GET',\n    headers: {\n      Authorization: `bearer ` + localStorage.token\n    }\n  };\n  fetch(PERSIST_URL, config).then(r => r.json()).then(userInstance => {\n    dispatch(setUserAction(userInstance));\n  });\n};\n\nconst logoutUser = () => dispatch => {\n  dispatch(clearUserAction());\n  localStorage.clear();\n};\n\nexport default {\n  newUserToDB,\n  deleteUserFromDB,\n  loginUserToDB,\n  persistUser,\n  logoutUser\n};","map":{"version":3,"sources":["/Users/stephenkeating/Development/code/stock-tracker-ttp/frontend/src/redux/actions.js"],"names":["BASE_URL","USERS_URL","PERSIST_URL","LOGIN_URL","SPECIFIC_USER_URL","id","setUserAction","userObj","type","payload","clearUserAction","newUserToDB","dispatch","config","method","headers","body","JSON","stringify","fetch","then","r","json","data","user","localStorage","setItem","token","deleteUserFromDB","userId","clear","loginUserToDB","userCredentials","persistUser","Authorization","userInstance","logoutUser"],"mappings":"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","sourcesContent":["// API CONSTANTS\n\nconst BASE_URL = 'http://localhost:3000';\nconst USERS_URL = BASE_URL + '/users';\nconst PERSIST_URL = BASE_URL + '/auth';\nconst LOGIN_URL = BASE_URL + '/login';\nconst SPECIFIC_USER_URL = id => USERS_URL + '/' + id;\n\n// Redux Actions\n\nconst setUserAction = userObj => {\n  return {\n    type: 'SET_USER',\n    payload: userObj\n  }\n};\n\nconst clearUserAction = () => ({\n  type: 'CLEAR_USER'\n});\n\n// Fetch\n\nconst newUserToDB = userObj => dispatch => {\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userObj)\n  };\n  fetch(USERS_URL, config)\n    .then(r => r.json())\n    .then(data => {\n      dispatch(setUserAction(data.user));\n      localStorage.setItem('token', data.token);\n    });\n};\n\nconst deleteUserFromDB = userId => dispatch => {\n  const config = {\n    method: 'DELETE'\n  };\n  fetch(SPECIFIC_USER_URL(userId), config).then(r => {\n    dispatch(clearUserAction());\n    localStorage.clear();\n  });\n};\n\nconst loginUserToDB = userCredentials => dispatch => {\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userCredentials)\n  };\n  fetch(LOGIN_URL, config)\n    .then(r => r.json())\n    .then(data => {\n      dispatch(setUserAction(data.user));\n      localStorage.setItem('token', data.token);\n    });\n};\n\nconst persistUser = () => dispatch => {\n  const config = {\n    method: 'GET',\n    headers: {\n      Authorization: `bearer ` + localStorage.token\n    }\n  };\n  fetch(PERSIST_URL, config)\n    .then(r => r.json())\n    .then(userInstance => {\n      dispatch(setUserAction(userInstance));\n    });\n};\n\nconst logoutUser = () => dispatch => {\n  dispatch(clearUserAction());\n  localStorage.clear();\n};\n\nexport default {\n  newUserToDB,\n  deleteUserFromDB,\n  loginUserToDB,\n  persistUser,\n  logoutUser\n};"]},"metadata":{},"sourceType":"module"}