{"ast":null,"code":"var _jsxFileName = \"/Users/stephenkeating/Development/code/stock-tracker-ttp/frontend/src/Components/PurchaseForm.js\";\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport userActions from '../redux/actions';\n\nconst PurchaseForm = props => {\n  // initializing dispatch\n  const dispatch = useDispatch(); // Setting up local state using the useState hook\n\n  const [loginForm, setLoginForm] = useState({\n    ticker: '',\n    email: '',\n    password: ''\n  }); // controlled form functions\n  // login without error handling\n  // const handleSubmit = e => {\n  //   e.preventDefault();\n  //   dispatch(userActions.loginUserToDB(loginForm));\n  //   props.history.push('/');\n  // };\n  // The following could be used for error handling:\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    userActions.loginUserToDB(loginForm).then(data => {\n      if (!data.user) {\n        // console.log(data.errors);\n        alert(data.errors);\n        return;\n      } else {\n        console.log(data);\n        dispatch(userActions.setUserAction(data.user));\n        dispatch(userActions.setTransactionsAction(data.transactions));\n        localStorage.setItem('token', data.token);\n        props.history.push('/');\n      }\n    });\n  };\n\n  const handleChange = e => setLoginForm({ ...loginForm,\n    [e.target.name]: e.target.value\n  }); // Destructuring keys from our local state to use in the form\n\n\n  const {\n    ticker,\n    password\n  } = loginForm; // Component code\n\n  return React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    name: \"ticker\",\n    value: ticker,\n    onChange: handleChange,\n    placeholder: \"ticker\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"password\",\n    name: \"password\",\n    value: password,\n    onChange: handleChange,\n    placeholder: \"Password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }));\n};\n\nexport default PurchaseForm;","map":{"version":3,"sources":["/Users/stephenkeating/Development/code/stock-tracker-ttp/frontend/src/Components/PurchaseForm.js"],"names":["React","useState","useDispatch","userActions","PurchaseForm","props","dispatch","loginForm","setLoginForm","ticker","email","password","handleSubmit","e","preventDefault","loginUserToDB","then","data","user","alert","errors","console","log","setUserAction","setTransactionsAction","transactions","localStorage","setItem","token","history","push","handleChange","target","name","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,WAAP,MAAwB,kBAAxB;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAC5B;AACA,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B,CAF4B,CAG5B;;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC;AACzCQ,IAAAA,MAAM,EAAE,EADiC;AAEzCC,IAAAA,KAAK,EAAE,EAFkC;AAGzCC,IAAAA,QAAQ,EAAE;AAH+B,GAAD,CAA1C,CAJ4B,CAU5B;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,QAAMC,YAAY,GAAGC,CAAC,IAAI;AACxBA,IAAAA,CAAC,CAACC,cAAF;AACAX,IAAAA,WAAW,CAACY,aAAZ,CAA0BR,SAA1B,EACCS,IADD,CACMC,IAAI,IAAI;AACZ,UAAG,CAACA,IAAI,CAACC,IAAT,EAAe;AACX;AACAC,QAAAA,KAAK,CAACF,IAAI,CAACG,MAAN,CAAL;AACA;AACH,OAJD,MAIO;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACAX,QAAAA,QAAQ,CAACH,WAAW,CAACoB,aAAZ,CAA0BN,IAAI,CAACC,IAA/B,CAAD,CAAR;AACAZ,QAAAA,QAAQ,CAACH,WAAW,CAACqB,qBAAZ,CAAkCP,IAAI,CAACQ,YAAvC,CAAD,CAAR;AACAC,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BV,IAAI,CAACW,KAAnC;AACAvB,QAAAA,KAAK,CAACwB,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACD;AACF,KAbD;AAcD,GAhBD;;AAkBA,QAAMC,YAAY,GAAGlB,CAAC,IACpBL,YAAY,CAAC,EAAE,GAAGD,SAAL;AAAgB,KAACM,CAAC,CAACmB,MAAF,CAASC,IAAV,GAAiBpB,CAAC,CAACmB,MAAF,CAASE;AAA1C,GAAD,CADd,CArC4B,CAwC5B;;;AACA,QAAM;AAAEzB,IAAAA,MAAF;AAAUE,IAAAA;AAAV,MAAuBJ,SAA7B,CAzC4B,CA2C5B;;AACA,SACE;AAAM,IAAA,QAAQ,EAAEK,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,KAAK,EAAEH,MAHT;AAIE,IAAA,QAAQ,EAAEsB,YAJZ;AAKE,IAAA,WAAW,EAAC,QALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAQE;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,KAAK,EAAEpB,QAHT;AAIE,IAAA,QAAQ,EAAEoB,YAJZ;AAKE,IAAA,WAAW,EAAC,UALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EAeE;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,CADF;AAmBD,CA/DD;;AAiEA,eAAe3B,YAAf","sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport userActions from '../redux/actions';\n\nconst PurchaseForm = props => {\n  // initializing dispatch\n  const dispatch = useDispatch();\n  // Setting up local state using the useState hook\n  const [loginForm, setLoginForm] = useState({\n    ticker: '',\n    email: '',\n    password: ''\n  });\n\n  // controlled form functions\n  // login without error handling\n  // const handleSubmit = e => {\n  //   e.preventDefault();\n  //   dispatch(userActions.loginUserToDB(loginForm));\n  //   props.history.push('/');\n  // };\n\n  // The following could be used for error handling:\n  const handleSubmit = e => {\n    e.preventDefault();\n    userActions.loginUserToDB(loginForm)\n    .then(data => {\n      if(!data.user) {\n          // console.log(data.errors);\n          alert(data.errors);\n          return;\n      } else {\n        console.log(data)\n        dispatch(userActions.setUserAction(data.user));\n        dispatch(userActions.setTransactionsAction(data.transactions));\n        localStorage.setItem('token', data.token);\n        props.history.push('/');\n      }\n    })\n  };\n\n  const handleChange = e =>\n    setLoginForm({ ...loginForm, [e.target.name]: e.target.value });\n\n  // Destructuring keys from our local state to use in the form\n  const { ticker, password } = loginForm;\n\n  // Component code\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        name=\"ticker\"\n        value={ticker}\n        onChange={handleChange}\n        placeholder=\"ticker\"\n      />\n      <input\n        type=\"password\"\n        name=\"password\"\n        value={password}\n        onChange={handleChange}\n        placeholder=\"Password\"\n      />\n      <input type=\"submit\" />\n    </form>\n  );\n};\n\nexport default PurchaseForm;\n"]},"metadata":{},"sourceType":"module"}