{"ast":null,"code":"var _jsxFileName = \"/Users/stephenkeating/Development/code/stock-tracker-ttp/frontend/src/Components/PurchaseForm.js\";\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport userActions from '../redux/actions';\n\nconst PurchaseForm = props => {\n  // initializing dispatch\n  const dispatch = useDispatch(); // Setting up local state using the useState hook\n\n  const [quoteForm, setQuoteForm] = useState({\n    ticker: '',\n    quantity: 0,\n    price: 0,\n    showQuote: false\n  }); // getting user balance from redux\n\n  const balance = useSelector(state => parseFloat(state.user.balance));\n  const user_id = useSelector(state => state.user.id);\n\n  const handleQuoteSubmit = e => {\n    e.preventDefault();\n    console.log(quoteForm);\n\n    if (quoteForm.quantity > 0) {\n      userActions.getQuote(quoteForm).then(data => {\n        if (!data.symbol) {\n          console.log(data);\n          alert(\"Incorrect Ticker\");\n          return;\n        } else {\n          console.log(data);\n          saveQuote(data);\n        }\n\n        ;\n      });\n    } else {\n      alert('Quantity must be 1 or more.');\n    }\n\n    ;\n  };\n\n  const handleBuyShares = e => {\n    e.preventDefault();\n    console.log(e.target.quotePrice.value, balance);\n\n    if (e.target.quotePrice.value > balance) {\n      alert('Insufficient Funds');\n    } else {\n      console.log(quoteForm, balance, user_id); // save purchase to backend, add to transactions in state or re-fetch state\n\n      userActions.newTransactionToDB({\n        ticker: quoteForm.ticker,\n        quantity: quoteForm.quantity,\n        price: quoteForm.price,\n        user_id: user_id\n      }).then(data => {\n        console.log(data);\n      }); // clear form\n    }\n  };\n\n  const saveQuote = data => setQuoteForm({ ...quoteForm,\n    price: data.latestPrice,\n    showQuote: true\n  });\n\n  const handleTickerChange = e => setQuoteForm({ ...quoteForm,\n    [e.target.name]: e.target.value.toUpperCase(),\n    showQuote: false\n  });\n\n  const handleQuantityChange = e => setQuoteForm({ ...quoteForm,\n    [e.target.name]: Math.round(e.target.value),\n    showQuote: false\n  }); // Destructuring keys from our local state to use in the form\n\n\n  const {\n    ticker,\n    quantity,\n    showQuote,\n    price\n  } = quoteForm; // Component code\n\n  return React.createElement(React.Fragment, null, React.createElement(\"form\", {\n    onSubmit: handleQuoteSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    name: \"ticker\",\n    value: ticker,\n    onChange: handleTickerChange,\n    placeholder: \"Ticker\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"number\",\n    name: \"quantity\",\n    value: quantity,\n    onChange: handleQuantityChange,\n    placeholder: \"Quantity\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Get Quote\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  })), showQuote ? React.createElement(\"form\", {\n    onSubmit: handleBuyShares,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"Price:\", React.createElement(\"input\", {\n    type: \"number\",\n    name: \"quotePrice\",\n    readOnly: true,\n    value: price * quantity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Buy Shares\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  })) : null);\n};\n\nexport default PurchaseForm;","map":{"version":3,"sources":["/Users/stephenkeating/Development/code/stock-tracker-ttp/frontend/src/Components/PurchaseForm.js"],"names":["React","useState","useDispatch","useSelector","userActions","PurchaseForm","props","dispatch","quoteForm","setQuoteForm","ticker","quantity","price","showQuote","balance","state","parseFloat","user","user_id","id","handleQuoteSubmit","e","preventDefault","console","log","getQuote","then","data","symbol","alert","saveQuote","handleBuyShares","target","quotePrice","value","newTransactionToDB","latestPrice","handleTickerChange","name","toUpperCase","handleQuantityChange","Math","round"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport userActions from '../redux/actions';\n\nconst PurchaseForm = props => {\n  // initializing dispatch\n  const dispatch = useDispatch();\n  // Setting up local state using the useState hook\n  const [quoteForm, setQuoteForm] = useState({\n    ticker: '',\n    quantity: 0,\n    price: 0,\n    showQuote: false\n  });\n\n  // getting user balance from redux\n  const balance = useSelector(state => parseFloat(state.user.balance));\n  const user_id = useSelector(state => state.user.id);\n\n  const handleQuoteSubmit = e => {\n    e.preventDefault();\n    console.log(quoteForm);\n    if (quoteForm.quantity > 0) {\n      userActions.getQuote(quoteForm)\n      .then(data => {\n        if(!data.symbol) {\n          console.log(data);\n          alert(\"Incorrect Ticker\");\n          return;\n        } else {\n          console.log(data)\n          saveQuote(data)\n        };\n      })\n    } else {\n      alert('Quantity must be 1 or more.');\n    };\n  };\n\n  const handleBuyShares = e => {\n    e.preventDefault();\n    console.log(e.target.quotePrice.value, balance);\n    if ( e.target.quotePrice.value > balance ) {\n      alert('Insufficient Funds')\n    } else {\n      console.log( quoteForm, balance, user_id );\n      // save purchase to backend, add to transactions in state or re-fetch state\n      userActions.newTransactionToDB({ticker: quoteForm.ticker, quantity: quoteForm.quantity, price: quoteForm.price, user_id: user_id})\n      .then (data => {\n        console.log(data)\n      })\n      // clear form\n\n    }\n  }\n\n  const saveQuote = data =>\n    setQuoteForm({ ...quoteForm, price: data.latestPrice, showQuote: true});\n\n  const handleTickerChange = e =>\n    setQuoteForm({ ...quoteForm, [e.target.name]: e.target.value.toUpperCase(), showQuote: false });\n  \n  const handleQuantityChange = e =>\n    setQuoteForm({ ...quoteForm, [e.target.name]: Math.round(e.target.value), showQuote: false });\n\n  // Destructuring keys from our local state to use in the form\n  const { ticker, quantity, showQuote, price } = quoteForm;\n\n  // Component code\n  return (\n    <>\n      <form onSubmit={handleQuoteSubmit}>\n        <input\n          type=\"text\"\n          name=\"ticker\"\n          value={ticker}\n          onChange={handleTickerChange}\n          placeholder=\"Ticker\"\n        />\n        <input\n          type=\"number\"\n          name=\"quantity\"\n          value={quantity}\n          onChange={handleQuantityChange}\n          placeholder=\"Quantity\"\n        />\n        <input type=\"submit\" value='Get Quote'/>\n      </form>\n      { showQuote\n        ? <form onSubmit={handleBuyShares}>\n            Price:\n            <input\n              type=\"number\"\n              name=\"quotePrice\"\n              readOnly\n              value={(price * quantity)}\n            />\n            <input type=\"submit\" value='Buy Shares'/>\n          </form>\n        : null\n      }\n    </>\n  );\n};\n\nexport default PurchaseForm;\n"]},"metadata":{},"sourceType":"module"}