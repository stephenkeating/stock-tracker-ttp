{"ast":null,"code":"// Reducer takes two arguments: state and action\n// inside the function is a switch case. default returns state. \n// return value of the reducer beccomes the new Redux state\nconst initialState = {\n  user: {},\n  transactions: [],\n  portfolio: {}\n};\nexport default ((state = initialState, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case 'SET_USER':\n      return { ...state,\n        user: payload\n      };\n\n    case 'SET_TRANSACTIONS':\n      return { ...state,\n        transactions: payload\n      };\n\n    case 'SET_PORTFOLIO':\n      return { ...state,\n        portfolio: payload\n      };\n\n    case 'CLEAR_USER':\n      return initialState;\n\n    case 'UPDATE_USER_BALANCE':\n      return { ...state,\n        user: { ...state.user,\n          balance: payload\n        }\n      };\n\n    case 'ADD_TRANSACTION':\n      return { ...state,\n        transactions: [...state.transactions, { ...payload\n        }]\n      };\n\n    case 'ADD_SHARE_TO_PORTFOLIO':\n      let updatedStock = {};\n      updatedStock[payload.ticker] = { ...updatedStock[payload.ticker],\n        quantity: payload.quantity\n      };\n      return { ...state,\n        portfolio: { ...state.portfolio,\n          ...updatedStock\n        }\n      };\n\n    case 'SET_SHARE_VALUE':\n      if (payload.ticker) {\n        let updatedShare = {};\n        updatedShare[payload.ticker] = { ...state.portfolio[payload.ticker],\n          latestPrice: payload.latestPrice,\n          open: payload.open,\n          totalValue: state.portfolio[payload.ticker]['quantity'] * payload.latestPrice\n        };\n        return { ...state,\n          portfolio: { ...state.portfolio,\n            ...updatedShare\n          }\n        };\n      }\n\n    // case 'UPDATE_PORTFOLIO_VALUE':\n    //   let currentValue = state.portfolioValue\n    //   let newValue = currentValue + payload\n    //   // console.log(newValue)\n    //   return {...state, portfolioValue: newValue};\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/stephenkeating/Development/code/stock-tracker-ttp/frontend/src/redux/rootReducer.js"],"names":["initialState","user","transactions","portfolio","state","type","payload","balance","updatedStock","ticker","quantity","updatedShare","latestPrice","open","totalValue"],"mappings":"AAAA;AACA;AACA;AAEA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAEnBC,EAAAA,YAAY,EAAE,EAFK;AAGnBC,EAAAA,SAAS,EAAE;AAHQ,CAArB;AAMA,gBAAe,CAACC,KAAK,GAAGJ,YAAT,EAAuB;AAAEK,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAvB,KAA6C;AAC1D,UAAQD,IAAR;AACE,SAAK,UAAL;AACE,aAAO,EAAC,GAAGD,KAAJ;AAAWH,QAAAA,IAAI,EAAEK;AAAjB,OAAP;;AACF,SAAK,kBAAL;AACE,aAAO,EAAC,GAAGF,KAAJ;AAAWF,QAAAA,YAAY,EAAEI;AAAzB,OAAP;;AACF,SAAK,eAAL;AACE,aAAO,EAAC,GAAGF,KAAJ;AAAWD,QAAAA,SAAS,EAAEG;AAAtB,OAAP;;AACF,SAAK,YAAL;AACE,aAAON,YAAP;;AACF,SAAK,qBAAL;AACE,aAAO,EAAC,GAAGI,KAAJ;AAAWH,QAAAA,IAAI,EAAE,EAAC,GAAGG,KAAK,CAACH,IAAV;AAAgBM,UAAAA,OAAO,EAAED;AAAzB;AAAjB,OAAP;;AACF,SAAK,iBAAL;AACE,aAAO,EAAC,GAAGF,KAAJ;AAAWF,QAAAA,YAAY,EAAE,CAAC,GAAGE,KAAK,CAACF,YAAV,EAAwB,EAAC,GAAGI;AAAJ,SAAxB;AAAzB,OAAP;;AACF,SAAK,wBAAL;AACE,UAAIE,YAAY,GAAG,EAAnB;AACAA,MAAAA,YAAY,CAACF,OAAO,CAACG,MAAT,CAAZ,GAA+B,EAAC,GAAGD,YAAY,CAACF,OAAO,CAACG,MAAT,CAAhB;AAAkCC,QAAAA,QAAQ,EAAEJ,OAAO,CAACI;AAApD,OAA/B;AACA,aAAO,EAAC,GAAGN,KAAJ;AACCD,QAAAA,SAAS,EAAE,EACT,GAAGC,KAAK,CAACD,SADA;AAET,aAAGK;AAFM;AADZ,OAAP;;AAMF,SAAK,iBAAL;AACE,UAAIF,OAAO,CAACG,MAAZ,EAAoB;AAClB,YAAIE,YAAY,GAAG,EAAnB;AACAA,QAAAA,YAAY,CAACL,OAAO,CAACG,MAAT,CAAZ,GACA,EACE,GAAGL,KAAK,CAACD,SAAN,CAAgBG,OAAO,CAACG,MAAxB,CADL;AAEEG,UAAAA,WAAW,EAAEN,OAAO,CAACM,WAFvB;AAGEC,UAAAA,IAAI,EAAEP,OAAO,CAACO,IAHhB;AAIEC,UAAAA,UAAU,EAAEV,KAAK,CAACD,SAAN,CAAgBG,OAAO,CAACG,MAAxB,EAAgC,UAAhC,IAA8CH,OAAO,CAACM;AAJpE,SADA;AAOA,eAAO,EAAC,GAAGR,KAAJ;AACCD,UAAAA,SAAS,EAAE,EACT,GAAGC,KAAK,CAACD,SADA;AAET,eAAGQ;AAFM;AADZ,SAAP;AAMD;;AACH;AACA;AACA;AACA;AACA;;AACA;AACE,aAAOP,KAAP;AA7CJ;AA+CD,CAhDD","sourcesContent":["// Reducer takes two arguments: state and action\n// inside the function is a switch case. default returns state. \n// return value of the reducer beccomes the new Redux state\n\nconst initialState = {\n  user: {},\n  transactions: [],\n  portfolio: {}\n}\n\nexport default (state = initialState, { type, payload }) => {\n  switch (type) {\n    case 'SET_USER':\n      return {...state, user: payload};\n    case 'SET_TRANSACTIONS':\n      return {...state, transactions: payload};\n    case 'SET_PORTFOLIO':\n      return {...state, portfolio: payload};\n    case 'CLEAR_USER':\n      return initialState;\n    case 'UPDATE_USER_BALANCE':\n      return {...state, user: {...state.user, balance: payload}};\n    case 'ADD_TRANSACTION':\n      return {...state, transactions: [...state.transactions, {...payload}]};\n    case 'ADD_SHARE_TO_PORTFOLIO':\n      let updatedStock = {}\n      updatedStock[payload.ticker] = {...updatedStock[payload.ticker], quantity: payload.quantity}\n      return {...state,\n              portfolio: {\n                ...state.portfolio,\n                ...updatedStock\n              }\n      }\n    case 'SET_SHARE_VALUE':\n      if (payload.ticker) {\n        let updatedShare = {}\n        updatedShare[payload.ticker] = \n        {\n          ...state.portfolio[payload.ticker], \n          latestPrice: payload.latestPrice, \n          open: payload.open, \n          totalValue: state.portfolio[payload.ticker]['quantity'] * payload.latestPrice \n        }\n        return {...state,\n                portfolio: {\n                  ...state.portfolio,\n                  ...updatedShare\n                }\n        }\n      }\n    // case 'UPDATE_PORTFOLIO_VALUE':\n    //   let currentValue = state.portfolioValue\n    //   let newValue = currentValue + payload\n    //   // console.log(newValue)\n    //   return {...state, portfolioValue: newValue};\n    default:\n      return state;\n  }\n};"]},"metadata":{},"sourceType":"module"}