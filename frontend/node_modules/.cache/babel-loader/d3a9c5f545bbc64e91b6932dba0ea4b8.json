{"ast":null,"code":"// API CONSTANTS\n// Backend Constants:\nconst BASE_URL = 'http://localhost:3000';\nconst USERS_URL = BASE_URL + '/users';\nconst PERSIST_URL = BASE_URL + '/auth';\nconst LOGIN_URL = BASE_URL + '/login';\nconst TRANSACTIONS_URL = BASE_URL + '/transactions';\n\nconst SPECIFIC_USER_URL = id => USERS_URL + '/' + id; // const TRANSACTIONS_URL = BASE_URL + '/transactions';\n// IES Sandbox constants. See console: https://iexcloud.io/console/\n\n\nconst IEX_SANDBOX_API_URL = 'https://sandbox.iexapis.com/stable/';\nconst IEX_SANDBOX_SECRET_TOKEN = process.env.REACT_APP_IEX_SANDBOX_SECRET_TOKEN;\n\nconst GET_QUOTE_URL = ticker => IEX_SANDBOX_API_URL + 'stock/' + ticker + '/quote?token=' + IEX_SANDBOX_SECRET_TOKEN; // const IEX_TOKEN = process.env.REACT_APP_IEX_API_TOKEN\n// Redux Actions\n\n\nconst setUserAction = userObj => {\n  return {\n    type: 'SET_USER',\n    payload: userObj\n  };\n};\n\nconst setTransactionsAction = transactionsObj => {\n  return {\n    type: 'SET_TRANSACTIONS',\n    payload: transactionsObj\n  };\n};\n\nconst clearUserAction = () => ({\n  type: 'CLEAR_USER'\n});\n\nconst updateUserBalanceAction = balance => ({\n  type: 'UPDATE_USER_BALANCE',\n  payload: balance\n});\n\nconst addTransactionAction = transaction => ({\n  type: 'ADD_TRANSACTION',\n  payload: transaction\n}); // Fetch\n// Pattern for new user (without error handling):\n// const newUserToDB = userObj => dispatch => {\n//   const config = {\n//     method: 'POST',\n//     headers: {\n//       'Content-Type': 'application/json'\n//     },\n//     body: JSON.stringify(userObj)\n//   };\n//   fetch(USERS_URL, config)\n//     .then(r => r.json())\n//     .then(data => {\n//       dispatch(setUserAction(data.user));\n//       localStorage.setItem('token', data.token);\n//     });\n// };\n// Pattern for new user (with error handling):\n\n\nconst newUserToDB = userObj => {\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userObj)\n  };\n  return fetch(USERS_URL, config).then(r => r.json());\n};\n\nconst deleteUserFromDB = userId => dispatch => {\n  const config = {\n    method: 'DELETE'\n  };\n  fetch(SPECIFIC_USER_URL(userId), config).then(r => {\n    dispatch(clearUserAction());\n    localStorage.clear();\n  });\n}; // Pattern to login user (without error Handling):\n// const loginUserToDB = userCredentials => dispatch => {\n//   const config = {\n//     method: 'POST',\n//     headers: {\n//       'Content-Type': 'application/json'\n//     },\n//     body: JSON.stringify(userCredentials)\n//   };\n//   fetch(LOGIN_URL, config)\n//     .then(r => r.json())\n//     .then(data => {\n//       dispatch(setUserAction(data.user));\n//       localStorage.setItem('token', data.token);\n//     })\n// };\n// Pattern to login (with error handling):\n\n\nconst loginUserToDB = userCredentials => {\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userCredentials)\n  };\n  return fetch(LOGIN_URL, config).then(r => r.json());\n};\n\nconst persistUser = () => dispatch => {\n  const config = {\n    method: 'GET',\n    headers: {\n      Authorization: `bearer ` + localStorage.token\n    }\n  };\n  fetch(PERSIST_URL, config).then(r => r.json()).then(data => {\n    dispatch(setUserAction(data.user));\n    dispatch(setTransactionsAction(data.transactions));\n  });\n};\n\nconst logoutUser = () => dispatch => {\n  dispatch(clearUserAction());\n  localStorage.clear();\n};\n\nconst getQuote = data => {\n  return fetch(GET_QUOTE_URL(data.ticker)).then(r => r.json()).catch(error => error);\n};\n\nconst newTransactionToDB = transactionObj => {\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(transactionObj)\n  };\n  return fetch(TRANSACTIONS_URL, config).then(r => r.json());\n};\n\nexport default {\n  newUserToDB,\n  deleteUserFromDB,\n  loginUserToDB,\n  persistUser,\n  logoutUser,\n  setUserAction,\n  setTransactionsAction,\n  getQuote,\n  newTransactionToDB,\n  updateUserBalanceAction,\n  addTransactionAction\n};","map":{"version":3,"sources":["/Users/stephenkeating/Development/code/stock-tracker-ttp/frontend/src/redux/actions.js"],"names":["BASE_URL","USERS_URL","PERSIST_URL","LOGIN_URL","TRANSACTIONS_URL","SPECIFIC_USER_URL","id","IEX_SANDBOX_API_URL","IEX_SANDBOX_SECRET_TOKEN","process","env","REACT_APP_IEX_SANDBOX_SECRET_TOKEN","GET_QUOTE_URL","ticker","setUserAction","userObj","type","payload","setTransactionsAction","transactionsObj","clearUserAction","updateUserBalanceAction","balance","addTransactionAction","transaction","newUserToDB","config","method","headers","body","JSON","stringify","fetch","then","r","json","deleteUserFromDB","userId","dispatch","localStorage","clear","loginUserToDB","userCredentials","persistUser","Authorization","token","data","user","transactions","logoutUser","getQuote","catch","error","newTransactionToDB","transactionObj"],"mappings":"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","sourcesContent":["// API CONSTANTS\n\n// Backend Constants:\nconst BASE_URL = 'http://localhost:3000';\nconst USERS_URL = BASE_URL + '/users';\nconst PERSIST_URL = BASE_URL + '/auth';\nconst LOGIN_URL = BASE_URL + '/login';\nconst TRANSACTIONS_URL = BASE_URL + '/transactions';\nconst SPECIFIC_USER_URL = id => USERS_URL + '/' + id;\n// const TRANSACTIONS_URL = BASE_URL + '/transactions';\n\n// IES Sandbox constants. See console: https://iexcloud.io/console/\nconst IEX_SANDBOX_API_URL = 'https://sandbox.iexapis.com/stable/'\nconst IEX_SANDBOX_SECRET_TOKEN = process.env.REACT_APP_IEX_SANDBOX_SECRET_TOKEN\nconst GET_QUOTE_URL = ticker => IEX_SANDBOX_API_URL + 'stock/' + ticker + '/quote?token=' + IEX_SANDBOX_SECRET_TOKEN\n\n// const IEX_TOKEN = process.env.REACT_APP_IEX_API_TOKEN\n\n// Redux Actions\n\nconst setUserAction = userObj => {\n  return {\n    type: 'SET_USER',\n    payload: userObj\n  }\n};\n\nconst setTransactionsAction = transactionsObj => {\n  return {\n    type: 'SET_TRANSACTIONS',\n    payload: transactionsObj\n  }\n};\n\nconst clearUserAction = () => ({\n  type: 'CLEAR_USER'\n});\n\nconst updateUserBalanceAction = balance => ({\n  type: 'UPDATE_USER_BALANCE',\n  payload: balance\n});\n\nconst addTransactionAction = transaction => ({\n  type: 'ADD_TRANSACTION',\n  payload: transaction\n});\n\n// Fetch\n\n// Pattern for new user (without error handling):\n// const newUserToDB = userObj => dispatch => {\n//   const config = {\n//     method: 'POST',\n//     headers: {\n//       'Content-Type': 'application/json'\n//     },\n//     body: JSON.stringify(userObj)\n//   };\n//   fetch(USERS_URL, config)\n//     .then(r => r.json())\n//     .then(data => {\n//       dispatch(setUserAction(data.user));\n//       localStorage.setItem('token', data.token);\n//     });\n// };\n\n// Pattern for new user (with error handling):\nconst newUserToDB = userObj => {\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userObj)\n  };\n  return fetch(USERS_URL, config)\n    .then(r => r.json())\n};\n\nconst deleteUserFromDB = userId => dispatch => {\n  const config = {\n    method: 'DELETE'\n  };\n  fetch(SPECIFIC_USER_URL(userId), config).then(r => {\n    dispatch(clearUserAction());\n    localStorage.clear();\n  });\n};\n\n// Pattern to login user (without error Handling):\n// const loginUserToDB = userCredentials => dispatch => {\n//   const config = {\n//     method: 'POST',\n//     headers: {\n//       'Content-Type': 'application/json'\n//     },\n//     body: JSON.stringify(userCredentials)\n//   };\n//   fetch(LOGIN_URL, config)\n//     .then(r => r.json())\n//     .then(data => {\n//       dispatch(setUserAction(data.user));\n//       localStorage.setItem('token', data.token);\n//     })\n// };\n\n// Pattern to login (with error handling):\nconst loginUserToDB = userCredentials => {\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userCredentials)\n  };\n  return fetch(LOGIN_URL, config)\n    .then(r => r.json())\n};\n\nconst persistUser = () => dispatch => {\n  const config = {\n    method: 'GET',\n    headers: {\n      Authorization: `bearer ` + localStorage.token\n    }\n  };\n  fetch(PERSIST_URL, config)\n    .then(r => r.json())\n    .then(data => {\n      dispatch(setUserAction(data.user));\n      dispatch(setTransactionsAction(data.transactions));\n    });\n};\n\nconst logoutUser = () => dispatch => {\n  dispatch(clearUserAction());\n  localStorage.clear();\n};\n\nconst getQuote = data => {\n  return fetch(GET_QUOTE_URL(data.ticker))\n    .then(r => r.json())\n    .catch(error => error)\n};\n\nconst newTransactionToDB = transactionObj => {\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(transactionObj)\n  };\n  return fetch(TRANSACTIONS_URL, config)\n    .then(r => r.json())\n};\n\nexport default {\n  newUserToDB,\n  deleteUserFromDB,\n  loginUserToDB,\n  persistUser,\n  logoutUser,\n  setUserAction,\n  setTransactionsAction,\n  getQuote,\n  newTransactionToDB,\n  updateUserBalanceAction,\n  addTransactionAction\n};"]},"metadata":{},"sourceType":"module"}