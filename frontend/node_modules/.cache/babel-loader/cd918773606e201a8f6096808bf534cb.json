{"ast":null,"code":"var _jsxFileName = \"/Users/stephenkeating/Development/code/stock-tracker-ttp/frontend/src/Pages/Login.js\";\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport userActions from '../redux/actions';\n\nconst LoginPage = props => {\n  // initializing dispatch\n  const dispatch = useDispatch(); // Setting up local state using the useState hook\n\n  const [loginForm, setLoginForm] = useState({\n    name: '',\n    email: '',\n    password: ''\n  }); // controlled form functions\n  // login without error handling\n  // const handleSubmit = e => {\n  //   e.preventDefault();\n  //   dispatch(userActions.loginUserToDB(loginForm));\n  //   props.history.push('/');\n  // };\n  // The following could be used for error handling:\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    userActions.loginUserToDB(loginForm).then(data => {\n      if (data.errors) {\n        console.log(data.errors);\n        alert(\"Unable to login\");\n      } else {\n        dispatch(userActions.setUserAction(data.user));\n        localStorage.setItem('token', data.token);\n        props.history.push('/');\n      }\n    });\n  };\n\n  const handleChange = e => setLoginForm({ ...loginForm,\n    [e.target.name]: e.target.value\n  }); // Destructuring keys from our local state to use in the form\n\n\n  const {\n    email,\n    password\n  } = loginForm; // Component code\n\n  return React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Login Page\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"email\",\n    value: email,\n    onChange: handleChange,\n    placeholder: \"Email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"password\",\n    name: \"password\",\n    value: password,\n    onChange: handleChange,\n    placeholder: \"Password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }));\n};\n\nexport default LoginPage;","map":{"version":3,"sources":["/Users/stephenkeating/Development/code/stock-tracker-ttp/frontend/src/Pages/Login.js"],"names":["React","useState","useDispatch","userActions","LoginPage","props","dispatch","loginForm","setLoginForm","name","email","password","handleSubmit","e","preventDefault","loginUserToDB","then","data","errors","console","log","alert","setUserAction","user","localStorage","setItem","token","history","push","handleChange","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,WAAP,MAAwB,kBAAxB;;AAEA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AACzB;AACA,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B,CAFyB,CAGzB;;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC;AACzCQ,IAAAA,IAAI,EAAE,EADmC;AAEzCC,IAAAA,KAAK,EAAE,EAFkC;AAGzCC,IAAAA,QAAQ,EAAE;AAH+B,GAAD,CAA1C,CAJyB,CAUzB;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,QAAMC,YAAY,GAAGC,CAAC,IAAI;AACxBA,IAAAA,CAAC,CAACC,cAAF;AACAX,IAAAA,WAAW,CAACY,aAAZ,CAA0BR,SAA1B,EACCS,IADD,CACMC,IAAI,IAAI;AACZ,UAAGA,IAAI,CAACC,MAAR,EAAgB;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACC,MAAjB;AACAG,QAAAA,KAAK,CAAC,iBAAD,CAAL;AACH,OAHD,MAGO;AACLf,QAAAA,QAAQ,CAACH,WAAW,CAACmB,aAAZ,CAA0BL,IAAI,CAACM,IAA/B,CAAD,CAAR;AACAC,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BR,IAAI,CAACS,KAAnC;AACArB,QAAAA,KAAK,CAACsB,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACD;AACF,KAVD;AAWD,GAbD;;AAeA,QAAMC,YAAY,GAAGhB,CAAC,IACpBL,YAAY,CAAC,EAAE,GAAGD,SAAL;AAAgB,KAACM,CAAC,CAACiB,MAAF,CAASrB,IAAV,GAAiBI,CAAC,CAACiB,MAAF,CAASC;AAA1C,GAAD,CADd,CAlCyB,CAqCzB;;;AACA,QAAM;AAAErB,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBJ,SAA5B,CAtCyB,CAwCzB;;AACA,SACE;AAAM,IAAA,QAAQ,EAAEK,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,KAAK,EAAEF,KAHT;AAIE,IAAA,QAAQ,EAAEmB,YAJZ;AAKE,IAAA,WAAW,EAAC,OALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EASE;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,KAAK,EAAElB,QAHT;AAIE,IAAA,QAAQ,EAAEkB,YAJZ;AAKE,IAAA,WAAW,EAAC,UALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,EAgBE;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBF,CADF;AAoBD,CA7DD;;AA+DA,eAAezB,SAAf","sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport userActions from '../redux/actions';\n\nconst LoginPage = props => {\n  // initializing dispatch\n  const dispatch = useDispatch();\n  // Setting up local state using the useState hook\n  const [loginForm, setLoginForm] = useState({\n    name: '',\n    email: '',\n    password: ''\n  });\n\n  // controlled form functions\n  // login without error handling\n  // const handleSubmit = e => {\n  //   e.preventDefault();\n  //   dispatch(userActions.loginUserToDB(loginForm));\n  //   props.history.push('/');\n  // };\n\n  // The following could be used for error handling:\n  const handleSubmit = e => {\n    e.preventDefault();\n    userActions.loginUserToDB(loginForm)\n    .then(data => {\n      if(data.errors) {\n          console.log(data.errors)\n          alert(\"Unable to login\")\n      } else {\n        dispatch(userActions.setUserAction(data.user));\n        localStorage.setItem('token', data.token);\n        props.history.push('/');\n      }\n    })\n  };\n\n  const handleChange = e =>\n    setLoginForm({ ...loginForm, [e.target.name]: e.target.value });\n\n  // Destructuring keys from our local state to use in the form\n  const { email, password } = loginForm;\n\n  // Component code\n  return (\n    <form onSubmit={handleSubmit}>\n      <h1>Login Page</h1>\n      <input\n        type=\"text\"\n        name=\"email\"\n        value={email}\n        onChange={handleChange}\n        placeholder=\"Email\"\n      />\n      <input\n        type=\"password\"\n        name=\"password\"\n        value={password}\n        onChange={handleChange}\n        placeholder=\"Password\"\n      />\n      <input type=\"submit\" />\n    </form>\n  );\n};\n\nexport default LoginPage;\n"]},"metadata":{},"sourceType":"module"}