{"ast":null,"code":"// API CONSTANTS\n// Backend Constants\nconst BASE_URL = 'http://localhost:3000';\nconst USERS_URL = BASE_URL + '/users';\nconst PERSIST_URL = BASE_URL + '/auth';\nconst LOGIN_URL = BASE_URL + '/login';\nconst TRANSACTIONS_URL = BASE_URL + '/transactions';\nconst SHARES_URL = BASE_URL + '/shares';\n\nconst SPECIFIC_USER_URL = id => USERS_URL + '/' + id; // const TRANSACTIONS_URL = BASE_URL + '/transactions';\n// IES Sandbox constants. See console: https://iexcloud.io/console/\n\n\nconst IEX_SANDBOX_API_URL = 'https://sandbox.iexapis.com/stable/';\nconst IEX_SANDBOX_SECRET_TOKEN = process.env.REACT_APP_IEX_SANDBOX_SECRET_TOKEN;\n\nconst GET_QUOTE_URL = ticker => IEX_SANDBOX_API_URL + 'stock/' + ticker + '/quote?token=' + IEX_SANDBOX_SECRET_TOKEN; // const IEX_TOKEN = process.env.REACT_APP_IEX_API_TOKEN\n// Redux Actions\n\n\nconst setUserAction = userObj => {\n  console.log(setPortfolio);\n  dispatch(setPortfolio(userObj.id));\n  return {\n    type: 'SET_USER',\n    payload: userObj\n  };\n};\n\nconst setTransactionsAction = transactionsObj => {\n  return {\n    type: 'SET_TRANSACTIONS',\n    payload: transactionsObj\n  };\n};\n\nconst clearUserAction = () => ({\n  type: 'CLEAR_USER'\n});\n\nconst updateUserBalanceAction = balance => ({\n  type: 'UPDATE_USER_BALANCE',\n  payload: balance\n});\n\nconst addTransactionAction = transaction => ({\n  type: 'ADD_TRANSACTION',\n  payload: transaction\n});\n\nconst setPortfolioAction = portfolioObj => {\n  return {\n    type: 'SET_PORTFOLIO',\n    payload: portfolioObj\n  };\n}; // Fetch\n// Pattern for new user (without error handling):\n// const newUserToDB = userObj => dispatch => {\n//   const config = {\n//     method: 'POST',\n//     headers: {\n//       'Content-Type': 'application/json'\n//     },\n//     body: JSON.stringify(userObj)\n//   };\n//   fetch(USERS_URL, config)\n//     .then(r => r.json())\n//     .then(data => {\n//       dispatch(setUserAction(data.user));\n//       localStorage.setItem('token', data.token);\n//     });\n// };\n// Pattern for new user (with error handling):\n\n\nconst newUserToDB = userObj => {\n  console.log(userObj);\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userObj)\n  };\n  return fetch(USERS_URL, config).then(r => r.json());\n};\n\nconst deleteUserFromDB = userId => dispatch => {\n  const config = {\n    method: 'DELETE'\n  };\n  fetch(SPECIFIC_USER_URL(userId), config).then(r => {\n    dispatch(clearUserAction());\n    localStorage.clear();\n  });\n}; // Pattern to login user (without error Handling):\n// const loginUserToDB = userCredentials => dispatch => {\n//   const config = {\n//     method: 'POST',\n//     headers: {\n//       'Content-Type': 'application/json'\n//     },\n//     body: JSON.stringify(userCredentials)\n//   };\n//   fetch(LOGIN_URL, config)\n//     .then(r => r.json())\n//     .then(data => {\n//       dispatch(setUserAction(data.user));\n//       localStorage.setItem('token', data.token);\n//     })\n// };\n// Pattern to login (with error handling):\n\n\nconst loginUserToDB = userCredentials => {\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userCredentials)\n  };\n  return fetch(LOGIN_URL, config).then(r => r.json());\n};\n\nconst persistUser = () => dispatch => {\n  const config = {\n    method: 'GET',\n    headers: {\n      Authorization: `bearer ` + localStorage.token\n    }\n  };\n  fetch(PERSIST_URL, config).then(r => r.json()).then(data => {\n    dispatch(setUserAction(data.user));\n    dispatch(setTransactionsAction(data.transactions));\n  });\n};\n\nconst logoutUser = () => dispatch => {\n  dispatch(clearUserAction());\n  localStorage.clear();\n};\n\nconst getQuote = data => {\n  return fetch(GET_QUOTE_URL(data.ticker)).then(r => r.json()).catch(error => error);\n};\n\nconst newTransactionToDB = transactionObj => {\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(transactionObj)\n  };\n  return fetch(TRANSACTIONS_URL, config).then(r => r.json());\n};\n\nconst setPortfolio = user_id => dispatch => {\n  console.log('hello from setPortfolio');\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      user_id: user_id\n    })\n  };\n  fetch(SHARES_URL, config).then(r => r.json()).then(data => {\n    console.log(data);\n    dispatch(setPortfolioAction(data.shares_map)); // dispatch(setTransactionsAction(data.transactions));\n  });\n};\n\nexport default {\n  newUserToDB,\n  deleteUserFromDB,\n  loginUserToDB,\n  persistUser,\n  logoutUser,\n  setUserAction,\n  setTransactionsAction,\n  getQuote,\n  newTransactionToDB,\n  updateUserBalanceAction,\n  addTransactionAction,\n  setPortfolio\n};","map":{"version":3,"sources":["/Users/stephenkeating/Development/code/stock-tracker-ttp/frontend/src/redux/actions.js"],"names":["BASE_URL","USERS_URL","PERSIST_URL","LOGIN_URL","TRANSACTIONS_URL","SHARES_URL","SPECIFIC_USER_URL","id","IEX_SANDBOX_API_URL","IEX_SANDBOX_SECRET_TOKEN","process","env","REACT_APP_IEX_SANDBOX_SECRET_TOKEN","GET_QUOTE_URL","ticker","setUserAction","userObj","console","log","setPortfolio","dispatch","type","payload","setTransactionsAction","transactionsObj","clearUserAction","updateUserBalanceAction","balance","addTransactionAction","transaction","setPortfolioAction","portfolioObj","newUserToDB","config","method","headers","body","JSON","stringify","fetch","then","r","json","deleteUserFromDB","userId","localStorage","clear","loginUserToDB","userCredentials","persistUser","Authorization","token","data","user","transactions","logoutUser","getQuote","catch","error","newTransactionToDB","transactionObj","user_id","shares_map"],"mappings":"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","sourcesContent":["// API CONSTANTS\n\n// Backend Constants\nconst BASE_URL = 'http://localhost:3000';\nconst USERS_URL = BASE_URL + '/users';\nconst PERSIST_URL = BASE_URL + '/auth';\nconst LOGIN_URL = BASE_URL + '/login';\nconst TRANSACTIONS_URL = BASE_URL + '/transactions';\nconst SHARES_URL = BASE_URL + '/shares';\nconst SPECIFIC_USER_URL = id => USERS_URL + '/' + id;\n// const TRANSACTIONS_URL = BASE_URL + '/transactions';\n\n// IES Sandbox constants. See console: https://iexcloud.io/console/\nconst IEX_SANDBOX_API_URL = 'https://sandbox.iexapis.com/stable/'\nconst IEX_SANDBOX_SECRET_TOKEN = process.env.REACT_APP_IEX_SANDBOX_SECRET_TOKEN\nconst GET_QUOTE_URL = ticker => IEX_SANDBOX_API_URL + 'stock/' + ticker + '/quote?token=' + IEX_SANDBOX_SECRET_TOKEN\n// const IEX_TOKEN = process.env.REACT_APP_IEX_API_TOKEN\n\n// Redux Actions\n\nconst setUserAction = userObj => {\n  console.log(setPortfolio)\n  dispatch(setPortfolio(userObj.id))\n  return {\n    type: 'SET_USER',\n    payload: userObj\n  }\n};\n\nconst setTransactionsAction = transactionsObj => {\n  return {\n    type: 'SET_TRANSACTIONS',\n    payload: transactionsObj\n  }\n};\n\nconst clearUserAction = () => ({\n  type: 'CLEAR_USER'\n});\n\nconst updateUserBalanceAction = balance => ({\n  type: 'UPDATE_USER_BALANCE',\n  payload: balance\n});\n\nconst addTransactionAction = transaction => ({\n  type: 'ADD_TRANSACTION',\n  payload: transaction\n});\n\nconst setPortfolioAction = portfolioObj => {\n  return {\n    type: 'SET_PORTFOLIO',\n    payload: portfolioObj\n  }\n};\n\n// Fetch\n\n// Pattern for new user (without error handling):\n// const newUserToDB = userObj => dispatch => {\n//   const config = {\n//     method: 'POST',\n//     headers: {\n//       'Content-Type': 'application/json'\n//     },\n//     body: JSON.stringify(userObj)\n//   };\n//   fetch(USERS_URL, config)\n//     .then(r => r.json())\n//     .then(data => {\n//       dispatch(setUserAction(data.user));\n//       localStorage.setItem('token', data.token);\n//     });\n// };\n\n// Pattern for new user (with error handling):\nconst newUserToDB = userObj => {\n  console.log(userObj)\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userObj)\n  };\n  return fetch(USERS_URL, config)\n    .then(r => r.json())\n};\n\nconst deleteUserFromDB = userId => dispatch => {\n  const config = {\n    method: 'DELETE'\n  };\n  fetch(SPECIFIC_USER_URL(userId), config)\n    .then(r => {\n      dispatch(clearUserAction());\n      localStorage.clear();\n  });\n};\n\n// Pattern to login user (without error Handling):\n// const loginUserToDB = userCredentials => dispatch => {\n//   const config = {\n//     method: 'POST',\n//     headers: {\n//       'Content-Type': 'application/json'\n//     },\n//     body: JSON.stringify(userCredentials)\n//   };\n//   fetch(LOGIN_URL, config)\n//     .then(r => r.json())\n//     .then(data => {\n//       dispatch(setUserAction(data.user));\n//       localStorage.setItem('token', data.token);\n//     })\n// };\n\n// Pattern to login (with error handling):\nconst loginUserToDB = userCredentials => {\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userCredentials)\n  };\n  return fetch(LOGIN_URL, config)\n    .then(r => r.json())\n};\n\nconst persistUser = () => dispatch => {\n  const config = {\n    method: 'GET',\n    headers: {\n      Authorization: `bearer ` + localStorage.token\n    }\n  };\n  fetch(PERSIST_URL, config)\n    .then(r => r.json())\n    .then(data => {\n      dispatch(setUserAction(data.user));\n      dispatch(setTransactionsAction(data.transactions));\n    });\n};\n\nconst logoutUser = () => dispatch => {\n  dispatch(clearUserAction());\n  localStorage.clear();\n};\n\nconst getQuote = data => {\n  return fetch(GET_QUOTE_URL(data.ticker))\n    .then(r => r.json())\n    .catch(error => error)\n};\n\nconst newTransactionToDB = transactionObj => {\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(transactionObj)\n  };\n  return fetch(TRANSACTIONS_URL, config)\n    .then(r => r.json())\n};\n\nconst setPortfolio = user_id => dispatch => {\n  console.log('hello from setPortfolio')\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({user_id: user_id})\n  };\n  fetch(SHARES_URL, config)\n    .then(r => r.json())\n    .then(data => {\n      console.log(data)\n      dispatch(setPortfolioAction(data.shares_map));\n      // dispatch(setTransactionsAction(data.transactions));\n    });\n};\n\nexport default {\n  newUserToDB,\n  deleteUserFromDB,\n  loginUserToDB,\n  persistUser,\n  logoutUser,\n  setUserAction,\n  setTransactionsAction,\n  getQuote,\n  newTransactionToDB,\n  updateUserBalanceAction,\n  addTransactionAction,\n  setPortfolio\n};"]},"metadata":{},"sourceType":"module"}