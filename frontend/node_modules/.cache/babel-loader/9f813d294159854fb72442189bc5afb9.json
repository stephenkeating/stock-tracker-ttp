{"ast":null,"code":"var _jsxFileName = \"/Users/stephenkeating/Development/code/stock-tracker-ttp/frontend/src/Components/Stock.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport userActions from '../redux/actions';\n\nconst Stock = props => {\n  // initializing dispatch\n  const dispatch = useDispatch(); // Setting up local state using the useState hook\n\n  const [stock, setStock] = useState({\n    ticker: props.ticker,\n    quantity: props.quantity,\n    latestPrice: 0,\n    open: 0\n  }); // useEffect acts like componentDidMount for Hooks\n\n  useEffect(() => {\n    userActions.getQuote(ticker).then(data => {\n      // getting IEX data. if there is no open price, setting open to latestPrice\n      setStock({ ...stock,\n        latestPrice: data.latestPrice,\n        open: data.open || data.latestPrice\n      });\n      dispatch(userActions.setShareValue(data.symbol, data.latestPrice, data.open));\n    });\n  }, [props.quantity]); // Destructuring keys from local state to use in the form\n\n  const {\n    ticker,\n    latestPrice,\n    open\n  } = stock; // Getting Stock Quantity from State to force component to reload\n\n  const stateQuantity = useSelector(state => state.portfolio[ticker].quantity); // Display:\n  // red if current price < open price, \n  // grey if current price = open price, \n  // green if the current price > open price.\n\n  const stockColor = () => {\n    if (open > latestPrice) {\n      return \"red\";\n    } else if (open < latestPrice) {\n      return \"green\";\n    } else {\n      return \"grey\";\n    }\n  };\n\n  const pluralize = quantity => {\n    return quantity === 1 ? \"Share\" : \"Shares\";\n  };\n\n  return React.createElement(\"div\", {\n    className: \"stock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: stockColor(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, ticker, \" \\u2013\\u2013 \", stateQuantity, \" \", pluralize(stateQuantity), \" \\u2013\\u2013 $\", parseFloat(latestPrice * stateQuantity).toFixed(2)));\n};\n\nexport default Stock;","map":{"version":3,"sources":["/Users/stephenkeating/Development/code/stock-tracker-ttp/frontend/src/Components/Stock.js"],"names":["React","useState","useEffect","useDispatch","useSelector","userActions","Stock","props","dispatch","stock","setStock","ticker","quantity","latestPrice","open","getQuote","then","data","setShareValue","symbol","stateQuantity","state","portfolio","stockColor","pluralize","parseFloat","toFixed"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,WAAP,MAAwB,kBAAxB;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AACrB;AACA,QAAMC,QAAQ,GAAGL,WAAW,EAA5B,CAFqB,CAGrB;;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC;AACjCU,IAAAA,MAAM,EAAEJ,KAAK,CAACI,MADmB;AAEjCC,IAAAA,QAAQ,EAAEL,KAAK,CAACK,QAFiB;AAGjCC,IAAAA,WAAW,EAAE,CAHoB;AAIjCC,IAAAA,IAAI,EAAE;AAJ2B,GAAD,CAAlC,CAJqB,CAWrB;;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,WAAW,CAACU,QAAZ,CAAqBJ,MAArB,EACGK,IADH,CACQC,IAAI,IAAI;AACZ;AACAP,MAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWI,QAAAA,WAAW,EAAEI,IAAI,CAACJ,WAA7B;AAA0CC,QAAAA,IAAI,EAAEG,IAAI,CAACH,IAAL,IAAaG,IAAI,CAACJ;AAAlE,OAAD,CAAR;AACAL,MAAAA,QAAQ,CAACH,WAAW,CAACa,aAAZ,CAA0BD,IAAI,CAACE,MAA/B,EAAuCF,IAAI,CAACJ,WAA5C,EAAyDI,IAAI,CAACH,IAA9D,CAAD,CAAR;AACH,KALD;AAMD,GAPQ,EAON,CAACP,KAAK,CAACK,QAAP,CAPM,CAAT,CAZqB,CAqBrB;;AACA,QAAM;AAAED,IAAAA,MAAF;AAAUE,IAAAA,WAAV;AAAuBC,IAAAA;AAAvB,MAAgCL,KAAtC,CAtBqB,CAwBrB;;AACA,QAAMW,aAAa,GAAGhB,WAAW,CAACiB,KAAK,IAAIA,KAAK,CAACC,SAAN,CAAgBX,MAAhB,EAAwBC,QAAlC,CAAjC,CAzBqB,CA2BrB;AACE;AACA;AACA;;AACF,QAAMW,UAAU,GAAG,MAAM;AACvB,QAAIT,IAAI,GAAGD,WAAX,EAAwB;AACtB,aAAO,KAAP;AACD,KAFD,MAEO,IAAIC,IAAI,GAAGD,WAAX,EAAwB;AAC7B,aAAO,OAAP;AACD,KAFM,MAEA;AACL,aAAO,MAAP;AACD;AACF,GARD;;AAUA,QAAMW,SAAS,GAAIZ,QAAD,IAAc;AAC9B,WAAOA,QAAQ,KAAK,CAAb,GAAiB,OAAjB,GAA2B,QAAlC;AACD,GAFD;;AAIA,SACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEW,UAAU,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGZ,MADH,oBACeS,aADf,OAC+BI,SAAS,CAACJ,aAAD,CADxC,qBAC8DK,UAAU,CAACZ,WAAW,GAAGO,aAAf,CAAV,CAAwCM,OAAxC,CAAgD,CAAhD,CAD9D,CADF,CADF;AAOD,CApDD;;AAsDA,eAAepB,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport userActions from '../redux/actions';\n\nconst Stock = props => {\n  // initializing dispatch\n  const dispatch = useDispatch();\n  // Setting up local state using the useState hook\n  const [stock, setStock] = useState({\n    ticker: props.ticker,\n    quantity: props.quantity,\n    latestPrice: 0,\n    open: 0\n  });\n\n  // useEffect acts like componentDidMount for Hooks\n  useEffect(() => {\n    userActions.getQuote(ticker)\n      .then(data => {\n        // getting IEX data. if there is no open price, setting open to latestPrice\n        setStock({...stock, latestPrice: data.latestPrice, open: data.open || data.latestPrice})\n        dispatch(userActions.setShareValue(data.symbol, data.latestPrice, data.open))\n    })\n  }, [props.quantity])\n\n  // Destructuring keys from local state to use in the form\n  const { ticker, latestPrice, open } = stock;\n\n  // Getting Stock Quantity from State to force component to reload\n  const stateQuantity = useSelector(state => state.portfolio[ticker].quantity);\n\n  // Display:\n    // red if current price < open price, \n    // grey if current price = open price, \n    // green if the current price > open price.\n  const stockColor = () => {\n    if (open > latestPrice) {\n      return \"red\"\n    } else if (open < latestPrice) {\n      return \"green\"\n    } else {\n      return \"grey\"\n    }\n  }\n  \n  const pluralize = (quantity) => {\n    return quantity === 1 ? \"Share\" : \"Shares\"\n  }\n\n  return (\n    <div className=\"stock\" >\n      <div className={stockColor()}>\n        {ticker} –– {stateQuantity} {pluralize(stateQuantity)} –– ${parseFloat(latestPrice * stateQuantity).toFixed(2)}\n      </div>\n    </div>\n  )\n}\n\nexport default Stock;"]},"metadata":{},"sourceType":"module"}